// Code generated by mockery v2.42.2. DO NOT EDIT.

package dataaccess

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

// DeleteFile provides a mock function with given fields: ctx, filePath
func (_m *MockStorage) DeleteFile(ctx context.Context, filePath string) error {
	ret := _m.Called(ctx, filePath)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadFile provides a mock function with given fields: ctx, filePath
func (_m *MockStorage) DownloadFile(ctx context.Context, filePath string) ([]byte, error) {
	ret := _m.Called(ctx, filePath)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, filePath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Purge provides a mock function with given fields: ctx, from
func (_m *MockStorage) Purge(ctx context.Context, from time.Time) (int, error) {
	ret := _m.Called(ctx, from)

	if len(ret) == 0 {
		panic("no return value specified for Purge")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (int, error)); ok {
		return rf(ctx, from)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) int); ok {
		r0 = rf(ctx, from)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, from)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveFile provides a mock function with given fields: ctx, filePath, file
func (_m *MockStorage) SaveFile(ctx context.Context, filePath string, file []byte) error {
	ret := _m.Called(ctx, filePath, file)

	if len(ret) == 0 {
		panic("no return value specified for SaveFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, filePath, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
